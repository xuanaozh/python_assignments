import csv
import bpy
from math import radians

fPath   = 'D:\MFADT Parsons\Book1.csv'
csvFile = csv.reader( open( fPath ) )
data    = [ row for row in csvFile ][1:] # Store CSV in list


allScores = sum([ int(row[1]) for row in data ])

scaleDuration     = 10
animationInterval = 5

#------------------------------------------------------------------------
# Create a new material #1
material = bpy.data.materials.new(name="White Emission")
material.use_nodes = True

# Remove default
material.node_tree.nodes.remove(material.node_tree.nodes.get('Principled BSDF'))
material_output = material.node_tree.nodes.get('Material Output')
emission = material.node_tree.nodes.new('ShaderNodeEmission')
emission.inputs['Strength'].default_value = 0.05
emission.inputs['Color'].default_value = (255,255,255,1)  # RGBA

# link emission shader to material
material.node_tree.links.new(material_output.inputs[0], emission.outputs[0])
#------------------------------------------------------------------------


#------------------------------------------------------------------------
for i, row  in enumerate(data):  
    DBA, SCORE = row
   
    scoreHeight  = (int(SCORE)/allScores) *200
    
    bpy.ops.mesh.primitive_cube_add(size=1,  
    location = ( 
            i * 1.3,         # X = current sale's index with a small gap
            0,               # Y = 0. All cubes are aligned in a straight line along the X axis.
            scoreHeight/2   # Z = half the height
        ))
        
    bpy.ops.object.modifier_add(type='WIREFRAME')
    bpy.context.object.modifiers["Wireframe"].use_relative_offset = True
    bpy.context.object.modifiers["Wireframe"].thickness = 0.05

        
    cube = bpy.data.objects[ bpy.context.object.name ]
    cube.dimensions.z = scoreHeight
    # set activer material to your new material
    cube.active_material = material
    
    # Set each cube's origin to its bottom face
    bpy.context.scene.cursor.location = ( i * 1, 0, 0 )
    bpy.ops.object.origin_set( type = 'ORIGIN_CURSOR' )
    
    # Add scale animation
    animStart = scaleDuration * i         + animationInterval
    animEnd   = scaleDuration * ( i + 1 ) + animationInterval
    
    cube.scale[2] = 0
    bpy.context.view_layer.update() 
    cube.keyframe_insert( data_path = 'scale', index = 2, frame = animStart )
    cube.scale[2] = scoreHeight
    bpy.context.view_layer.update()
    cube.keyframe_insert( data_path ='scale', index = 2, frame = animEnd )  
#------------------------------------------------------------------------

        
#------------------------------------------------------------------------   
       # Add text object
    bpy.ops.object.text_add(
        location = ( i * 1.3, 1, 0 )
    )
    
    text = bpy.context.object
    text.data.align_x = 'LEFT'
    text.data.align_y = 'CENTER'
    text.rotation_euler.z = radians(90) # Rotate text by 90 degrees along Z axis
    text.data.extrude     = 0.05        # Add depth to the text
    bpy.context.object.data.space_character = 2.0
    text.data.body        = DBA        # Set the text to be the current row's date
    text.active_material = material
#------------------------------------------------------------------------
